package com.example.educationalvideo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.educationalvideo.dao.CollectVideoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECT_VIDEO_BEAN".
*/
public class CollectVideoBeanDao extends AbstractDao<CollectVideoBean, Long> {

    public static final String TABLENAME = "COLLECT_VIDEO_BEAN";

    /**
     * Properties of entity CollectVideoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserId = new Property(2, int.class, "userId", false, "USER_ID");
        public final static Property VideoUrls = new Property(3, String.class, "videoUrls", false, "VIDEO_URLS");
        public final static Property VideoTitles = new Property(4, String.class, "videoTitles", false, "VIDEO_TITLES");
        public final static Property VideoPosters = new Property(5, String.class, "videoPosters", false, "VIDEO_POSTERS");
        public final static Property CollectId = new Property(6, String.class, "collectId", false, "COLLECT_ID");
        public final static Property IsCollect = new Property(7, Boolean.class, "isCollect", false, "IS_COLLECT");
    }


    public CollectVideoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CollectVideoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECT_VIDEO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_ID\" INTEGER NOT NULL ," + // 2: userId
                "\"VIDEO_URLS\" TEXT," + // 3: videoUrls
                "\"VIDEO_TITLES\" TEXT," + // 4: videoTitles
                "\"VIDEO_POSTERS\" TEXT," + // 5: videoPosters
                "\"COLLECT_ID\" TEXT," + // 6: collectId
                "\"IS_COLLECT\" INTEGER);"); // 7: isCollect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECT_VIDEO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectVideoBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindLong(3, entity.getUserId());
 
        String videoUrls = entity.getVideoUrls();
        if (videoUrls != null) {
            stmt.bindString(4, videoUrls);
        }
 
        String videoTitles = entity.getVideoTitles();
        if (videoTitles != null) {
            stmt.bindString(5, videoTitles);
        }
 
        String videoPosters = entity.getVideoPosters();
        if (videoPosters != null) {
            stmt.bindString(6, videoPosters);
        }
 
        String collectId = entity.getCollectId();
        if (collectId != null) {
            stmt.bindString(7, collectId);
        }
 
        Boolean isCollect = entity.getIsCollect();
        if (isCollect != null) {
            stmt.bindLong(8, isCollect ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectVideoBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
        stmt.bindLong(3, entity.getUserId());
 
        String videoUrls = entity.getVideoUrls();
        if (videoUrls != null) {
            stmt.bindString(4, videoUrls);
        }
 
        String videoTitles = entity.getVideoTitles();
        if (videoTitles != null) {
            stmt.bindString(5, videoTitles);
        }
 
        String videoPosters = entity.getVideoPosters();
        if (videoPosters != null) {
            stmt.bindString(6, videoPosters);
        }
 
        String collectId = entity.getCollectId();
        if (collectId != null) {
            stmt.bindString(7, collectId);
        }
 
        Boolean isCollect = entity.getIsCollect();
        if (isCollect != null) {
            stmt.bindLong(8, isCollect ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CollectVideoBean readEntity(Cursor cursor, int offset) {
        CollectVideoBean entity = new CollectVideoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.getInt(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // videoUrls
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoTitles
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // videoPosters
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // collectId
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // isCollect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollectVideoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.getInt(offset + 2));
        entity.setVideoUrls(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideoTitles(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideoPosters(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCollectId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsCollect(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CollectVideoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CollectVideoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CollectVideoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
